version: "3.8"
services:
  # Start of user-authentication-service containers
  user-authentication-service:
    depends_on:
      - user-details-db
    build: ./user-authentication-service
    networks:
      - backend
    container_name: user-authentication-service
    ports:
      - "8080:8080"
    environment:
      AUTH_MODE: 
      SPRING_DATASOURCE_URL: 
      SPRING_DATASOURCE_USERNAME: 
      SPRING_DATASOURCE_PASSWORD: 
      SPRING_JPA_HIBERNATE_DLL_AUTO: 
      SPRING_JPA_SHOW_SQL: true
      REDIRECT_URL: 
      AUTHENTICATION_SERVER_URI: 
      JWT_PRIVATE_KEY: 
      JWT_PUBLIC_KEY: 
      SENDGRID_EMAIL_API_KEY: 

  user-details-db:
    image: postgres:17
    networks:
      - backend
    container_name: user-details-db
    environment:
      POSTGRES_USER: 
      POSTGRES_PASSWORD: 
      POSTGRES_DB: 
    ports:
      - "5433:5432"
    volumes:
      - user_details_data:/var/lib/postgresql/data
      - ./user-authentication-service/init.sql:/docker-entrypoint-initdb.d/init.sql
  # End of user-authentication-service containers

  # Start of movie-service containers
  movie-service:
    depends_on:
      - redis
      - kafka
      - user-authentication-service
      - movies-db
    build: ./movie-service
    networks:
      - backend
    container_name: movie-service
    environment:
      SPRING_R2DBC_URL: 
      SPRING_R2DBC_USERNAME: 
      SPRING_R2DBC_PASSWORD: 
      SPRING_SQL_INIT_MODE: 
      SPRING_REDIS_HOST: 
      SPRING_REDIS_PORT: 
      OMDBAPI_BASE_URL: 
      OMDBAPI_API_KEY: 
      SPRING_KAFKA_BOOTSTRAP_SERVERS: 
      KAFKA_TOPIC_PREFIX: 
      KAFKA_TOPIC_RETENTION_DAYS: 
      AUTH_SERVICE_BASE_URL:
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: 
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: 
      TWILIO_SENDGRID_EMAIL_API_KEY: 
      TWILIO_SENDGRID_EMAIL_API_URL:
      TWILIO_SENDGRID_EMAIL_API_SENDER_EMAIL:
      TWILIO_SENDGRID_EMAIL_API_SENDER_NAME: 
      OPENAI_API_KEY: 
      OPENAI_BASE_URL: 
      TMDB_BASE_URL:
      TMDB_API_KEY: 
    ports:
      - "9080:9080"

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      - backend
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  redis:
    container_name: 'guide-redis'
    image: 'redis:latest'
    networks:
      - backend
    ports:
      - "6379:6379"

  movies-db:
    image: postgres:17
    networks:
      - backend
    container_name: movies_db
    environment:
      POSTGRES_USER: 
      POSTGRES_PASSWORD: 
      POSTGRES_DB: 
    ports:
      - "5434:5432"
    volumes:
      - movie_data:/var/lib/postgresql/data

networks:
  backend:

volumes:
  user_details_data:
  movie_data:
